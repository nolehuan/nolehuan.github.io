{"title":"metric","uid":"cd660e4484278535b991f5aebfd7a3ef","slug":"learning/metric","date":"2024-01-01T16:11:29.000Z","updated":"2024-01-01T08:12:02.450Z","comments":true,"path":"api/articles/learning/metric.json","cover":null,"content":"<h3 id=\"AP-F1score\"><a href=\"#AP-F1score\" class=\"headerlink\" title=\"AP F1score\"></a>AP F1score</h3><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># https://github.com/eriklindernoren/PyTorch-YOLOv3/blob/master/pytorchyolo/utils/utils.py</span></span><br><span class=\"line\"><span class=\"comment\"># import tqdm</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> numpy <span class=\"keyword\">as</span> np</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">ap_per_class</span>(<span class=\"params\">tp, conf, pred_cls, target_cls</span>):</span><br><span class=\"line\">  <span class=\"string\">&quot;&quot;&quot; Compute the average precision, given the recall and precision curves.</span></span><br><span class=\"line\"><span class=\"string\">  Source: https://github.com/rafaelpadilla/Object-Detection-Metrics.</span></span><br><span class=\"line\"><span class=\"string\">  # Arguments</span></span><br><span class=\"line\"><span class=\"string\">      tp:         true positive (np array), true positive 1, false positive 0</span></span><br><span class=\"line\"><span class=\"string\">      conf:       Objectness value from 0-1 (np array).</span></span><br><span class=\"line\"><span class=\"string\">      pred_cls:   Predicted object classes (np array).</span></span><br><span class=\"line\"><span class=\"string\">      target_cls: True object classes (np array).</span></span><br><span class=\"line\"><span class=\"string\">  # Returns</span></span><br><span class=\"line\"><span class=\"string\">      The average precision as computed in py-faster-rcnn.</span></span><br><span class=\"line\"><span class=\"string\">  &quot;&quot;&quot;</span></span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\"># Sort by objectness</span></span><br><span class=\"line\">  i = np.argsort(-conf)</span><br><span class=\"line\">  tp, conf, pred_cls = tp[i], conf[i], pred_cls[i]</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\"># Find unique classes</span></span><br><span class=\"line\">  unique_classes = np.unique(target_cls)</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\"># Create Precision-Recall curve and compute AP for each class</span></span><br><span class=\"line\">  ap, p, r = [], [], []</span><br><span class=\"line\">  <span class=\"comment\"># for c in tqdm.tqdm(unique_classes, desc=&quot;Computing AP&quot;):</span></span><br><span class=\"line\">  <span class=\"keyword\">for</span> c <span class=\"keyword\">in</span> unique_classes:</span><br><span class=\"line\">    i = pred_cls == c</span><br><span class=\"line\">    n_gt = (target_cls == c).<span class=\"built_in\">sum</span>()  <span class=\"comment\"># Number of ground truth objects</span></span><br><span class=\"line\">    n_p = i.<span class=\"built_in\">sum</span>()  <span class=\"comment\"># Number of predicted objects</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">if</span> n_p == <span class=\"number\">0</span> <span class=\"keyword\">and</span> n_gt == <span class=\"number\">0</span>:</span><br><span class=\"line\">      <span class=\"keyword\">continue</span></span><br><span class=\"line\">    <span class=\"keyword\">elif</span> n_p == <span class=\"number\">0</span> <span class=\"keyword\">or</span> n_gt == <span class=\"number\">0</span>:</span><br><span class=\"line\">      ap.append(<span class=\"number\">0</span>)</span><br><span class=\"line\">      r.append(<span class=\"number\">0</span>)</span><br><span class=\"line\">      p.append(<span class=\"number\">0</span>)</span><br><span class=\"line\">    <span class=\"keyword\">else</span>:</span><br><span class=\"line\">      <span class=\"comment\"># Accumulate FPs and TPs</span></span><br><span class=\"line\">      fpc = (<span class=\"number\">1</span> - tp[i]).cumsum()</span><br><span class=\"line\">      tpc = (tp[i]).cumsum()</span><br><span class=\"line\"></span><br><span class=\"line\">      <span class=\"comment\"># Recall</span></span><br><span class=\"line\">      recall_curve = tpc / (n_gt + <span class=\"number\">1e-16</span>)</span><br><span class=\"line\">      r.append(recall_curve[-<span class=\"number\">1</span>])</span><br><span class=\"line\"></span><br><span class=\"line\">      <span class=\"comment\"># Precision</span></span><br><span class=\"line\">      precision_curve = tpc / (tpc + fpc)</span><br><span class=\"line\">      p.append(precision_curve[-<span class=\"number\">1</span>])</span><br><span class=\"line\"></span><br><span class=\"line\">      <span class=\"comment\"># AP from recall-precision curve</span></span><br><span class=\"line\">      ap.append(compute_ap(recall_curve, precision_curve))</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\"># Compute F1 score (harmonic mean of precision and recall)</span></span><br><span class=\"line\">  p, r, ap = np.array(p), np.array(r), np.array(ap)</span><br><span class=\"line\">  f1 = <span class=\"number\">2</span> * p * r / (p + r + <span class=\"number\">1e-16</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">return</span> p, r, ap, f1, unique_classes.astype(<span class=\"string\">&quot;int32&quot;</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">compute_ap</span>(<span class=\"params\">recall, precision</span>):</span><br><span class=\"line\">  <span class=\"string\">&quot;&quot;&quot; Compute the average precision, given the recall and precision curves.</span></span><br><span class=\"line\"><span class=\"string\">  Code originally from https://github.com/rbgirshick/py-faster-rcnn.</span></span><br><span class=\"line\"><span class=\"string\"></span></span><br><span class=\"line\"><span class=\"string\">  # Arguments</span></span><br><span class=\"line\"><span class=\"string\">      recall:    The recall curve (np.array).</span></span><br><span class=\"line\"><span class=\"string\">      precision: The precision curve (np.array).</span></span><br><span class=\"line\"><span class=\"string\">  # Returns</span></span><br><span class=\"line\"><span class=\"string\">      The average precision as computed in py-faster-rcnn.</span></span><br><span class=\"line\"><span class=\"string\">  &quot;&quot;&quot;</span></span><br><span class=\"line\">  <span class=\"comment\"># correct AP calculation</span></span><br><span class=\"line\">  <span class=\"comment\"># first append sentinel values at the end</span></span><br><span class=\"line\">  mrec = np.concatenate(([<span class=\"number\">0.0</span>], recall, [<span class=\"number\">1.0</span>]))</span><br><span class=\"line\">  mpre = np.concatenate(([<span class=\"number\">0.0</span>], precision, [<span class=\"number\">0.0</span>]))</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\"># compute the precision envelope</span></span><br><span class=\"line\">  <span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> <span class=\"built_in\">range</span>(mpre.size - <span class=\"number\">1</span>, <span class=\"number\">0</span>, -<span class=\"number\">1</span>):</span><br><span class=\"line\">    mpre[i - <span class=\"number\">1</span>] = np.maximum(mpre[i - <span class=\"number\">1</span>], mpre[i])</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\"># to calculate area under PR curve, look for points</span></span><br><span class=\"line\">  <span class=\"comment\"># where X axis (recall) changes value</span></span><br><span class=\"line\">  i = np.where(mrec[:-<span class=\"number\">1</span>] != mrec[<span class=\"number\">1</span>:])[<span class=\"number\">0</span>]</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\"># and sum (\\Delta recall) * prec</span></span><br><span class=\"line\">  ap = np.<span class=\"built_in\">sum</span>((mrec[i + <span class=\"number\">1</span>] - mrec[i]) * mpre[i + <span class=\"number\">1</span>])</span><br><span class=\"line\">  <span class=\"keyword\">return</span> ap</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">if</span> __name__ == <span class=\"string\">&#x27;__main__&#x27;</span>:</span><br><span class=\"line\">  tp = np.array([<span class=\"number\">0</span>, <span class=\"number\">1</span>, <span class=\"number\">1</span>, <span class=\"number\">1</span>, <span class=\"number\">0</span>, <span class=\"number\">1</span>, <span class=\"number\">0</span>])</span><br><span class=\"line\">  conf = np.array([<span class=\"number\">0.45</span>, <span class=\"number\">0.6</span>, <span class=\"number\">0.86</span>, <span class=\"number\">0.94</span>, <span class=\"number\">0.23</span>, <span class=\"number\">0.76</span>, <span class=\"number\">0.34</span>])</span><br><span class=\"line\">  pred_cls = np.array([<span class=\"number\">0</span>, <span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>, <span class=\"number\">0</span>])</span><br><span class=\"line\">  target_cls = np.array([<span class=\"number\">3</span>, <span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">1</span>, <span class=\"number\">0</span>, <span class=\"number\">3</span>, <span class=\"number\">1</span>])</span><br><span class=\"line\">  p, r, ap, f1, unique_classes = ap_per_class(tp, conf, pred_cls, target_cls)</span><br><span class=\"line\">  <span class=\"built_in\">print</span>(p)</span><br><span class=\"line\">  <span class=\"built_in\">print</span>(r)</span><br><span class=\"line\">  <span class=\"built_in\">print</span>(ap)</span><br><span class=\"line\">  <span class=\"comment\"># print(f1)</span></span><br><span class=\"line\">  <span class=\"comment\"># print(unique_classes)</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"AUC\"><a href=\"#AUC\" class=\"headerlink\" title=\"AUC\"></a>AUC</h3><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">calcAUC</span>(<span class=\"params\">labels, probs</span>):</span><br><span class=\"line\">  P = np.<span class=\"built_in\">sum</span>(labels == <span class=\"number\">1</span>)</span><br><span class=\"line\">  N = np.<span class=\"built_in\">sum</span>(labels == <span class=\"number\">0</span>)</span><br><span class=\"line\">  neg_prob = []</span><br><span class=\"line\">  pos_prob = []</span><br><span class=\"line\">  <span class=\"keyword\">for</span> i, label <span class=\"keyword\">in</span> <span class=\"built_in\">enumerate</span>(labels):</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (label == <span class=\"number\">1</span>):</span><br><span class=\"line\">      pos_prob.append(probs[i])</span><br><span class=\"line\">    <span class=\"keyword\">else</span>:</span><br><span class=\"line\">      neg_prob.append(probs[i])</span><br><span class=\"line\">  count = <span class=\"number\">0</span></span><br><span class=\"line\">  <span class=\"keyword\">for</span> pos <span class=\"keyword\">in</span> pos_prob:</span><br><span class=\"line\">    <span class=\"keyword\">for</span> neg <span class=\"keyword\">in</span> neg_prob:</span><br><span class=\"line\">      <span class=\"keyword\">if</span> pos &gt; neg:</span><br><span class=\"line\">        count += <span class=\"number\">1</span></span><br><span class=\"line\">      <span class=\"keyword\">elif</span> pos == neg:</span><br><span class=\"line\">        count += <span class=\"number\">0.5</span></span><br><span class=\"line\">  <span class=\"keyword\">return</span> count / (N * P)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">from</span> sklearn.metrics <span class=\"keyword\">import</span> roc_auc_score</span><br><span class=\"line\"></span><br><span class=\"line\">labels = np.array([<span class=\"number\">1</span>, <span class=\"number\">0</span>, <span class=\"number\">0</span>, <span class=\"number\">0</span>, <span class=\"number\">1</span>, <span class=\"number\">0</span>, <span class=\"number\">1</span>, <span class=\"number\">0</span>])</span><br><span class=\"line\">probs = np.array([<span class=\"number\">0.9</span>, <span class=\"number\">0.8</span>, <span class=\"number\">0.3</span>, <span class=\"number\">0.1</span>, <span class=\"number\">0.4</span>, <span class=\"number\">0.9</span>, <span class=\"number\">0.66</span>, <span class=\"number\">0.7</span>])</span><br><span class=\"line\"><span class=\"built_in\">print</span>(calcAUC(labels, probs))</span><br><span class=\"line\"><span class=\"built_in\">print</span>(roc_auc_score(labels, probs))</span><br></pre></td></tr></table></figure>\n","feature":true,"text":"learning...","permalink":"/post/learning/metric","photos":[],"count_time":{"symbolsCount":"4k","symbolsTime":"4 mins."},"categories":[{"name":"learning","slug":"learning","count":6,"path":"api/categories/learning.json"}],"tags":[{"name":"coding","slug":"coding","count":4,"path":"api/tags/coding.json"},{"name":"metric","slug":"metric","count":1,"path":"api/tags/metric.json"}],"toc":"<ol class=\"toc\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#AP-F1score\"><span class=\"toc-text\">AP F1score</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#AUC\"><span class=\"toc-text\">AUC</span></a></li></ol>","author":{"name":"NoleHuan","slug":"blog-author","avatar":"/img/tennis_logo.svg","link":"/","description":"The true nature of a heart is seen in its response to the unattractive.","socials":{"github":"https://github.com/nolehuan","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"https://weibo.com/u/5948495997","zhihu":"","csdn":"","juejin":"","customs":{}}},"mapped":true,"hidden":false,"prev_post":{"title":"dropout","uid":"05d8b7ec3259b85f8c48af5355fd4be4","slug":"learning/dropout","date":"2024-01-01T16:15:29.000Z","updated":"2024-01-01T08:16:12.940Z","comments":true,"path":"api/articles/learning/dropout.json","cover":null,"text":"dropout...","permalink":"/post/learning/dropout","photos":[],"count_time":{"symbolsCount":566,"symbolsTime":"1 mins."},"categories":[{"name":"learning","slug":"learning","count":6,"path":"api/categories/learning.json"}],"tags":[{"name":"coding","slug":"coding","count":4,"path":"api/tags/coding.json"}],"author":{"name":"NoleHuan","slug":"blog-author","avatar":"/img/tennis_logo.svg","link":"/","description":"The true nature of a heart is seen in its response to the unattractive.","socials":{"github":"https://github.com/nolehuan","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"https://weibo.com/u/5948495997","zhihu":"","csdn":"","juejin":"","customs":{}}},"feature":true},"next_post":{"title":"nms","uid":"7e6b04d6ee5d3c39d64da1c68ae92e32","slug":"learning/nms","date":"2024-01-01T16:11:29.000Z","updated":"2024-01-01T08:14:11.449Z","comments":true,"path":"api/articles/learning/nms.json","cover":null,"text":"non maximum suppression...","permalink":"/post/learning/nms","photos":[],"count_time":{"symbolsCount":"3.4k","symbolsTime":"3 mins."},"categories":[{"name":"learning","slug":"learning","count":6,"path":"api/categories/learning.json"}],"tags":[{"name":"coding","slug":"coding","count":4,"path":"api/tags/coding.json"},{"name":"nms","slug":"nms","count":1,"path":"api/tags/nms.json"}],"author":{"name":"NoleHuan","slug":"blog-author","avatar":"/img/tennis_logo.svg","link":"/","description":"The true nature of a heart is seen in its response to the unattractive.","socials":{"github":"https://github.com/nolehuan","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"https://weibo.com/u/5948495997","zhihu":"","csdn":"","juejin":"","customs":{}}},"feature":false}}