{"title":"coding","uid":"b4a6538dc071828808eb7d5a2b2b15ae","slug":"learning/coding","date":"2024-01-01T15:50:29.000Z","updated":"2024-01-01T08:12:07.734Z","comments":true,"path":"api/articles/learning/coding.json","cover":null,"content":"<h3 id=\"Softmax-CrossEntropy\"><a href=\"#Softmax-CrossEntropy\" class=\"headerlink\" title=\"Softmax CrossEntropy\"></a>Softmax CrossEntropy</h3><p>softmax 中 <code>exp</code> 对很大的数会出现 <code>inf</code>，因此要先对每行数字减去每行的最大值，保证 softmax 的 numerical stability<br>cross_entropy 中 <code>log(predictions)</code> 得到 <code>(3, 3)</code> 矩阵，<code>target</code> 必须也是 <code>(3, 3)</code> 才能对应正确相乘，因此 <code>target</code> 要事先转成 onehot<br><code>log</code> 函数输入 <code>0</code> 时会出现错误，因此 <code>log(predictions)</code> 前要对 <code>predictions</code> 进行 <code>clip</code>，将其中的 <code>0</code> 修改为一个很小的数字</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># https://zhuanlan.zhihu.com/p/72347472</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> numpy <span class=\"keyword\">as</span> np</span><br><span class=\"line\"><span class=\"keyword\">import</span> torch</span><br><span class=\"line\"><span class=\"keyword\">import</span> torch.nn <span class=\"keyword\">as</span> nn</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">softmax</span>(<span class=\"params\">x</span>):</span><br><span class=\"line\">  exp_x = np.exp(x - np.<span class=\"built_in\">max</span>(x, axis=-<span class=\"number\">1</span>, keepdims=<span class=\"literal\">True</span>))</span><br><span class=\"line\">  sm = exp_x / np.<span class=\"built_in\">sum</span>(exp_x, axis=-<span class=\"number\">1</span>, keepdims=<span class=\"literal\">True</span>)</span><br><span class=\"line\">  <span class=\"keyword\">return</span> sm</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">cross_entropy</span>(<span class=\"params\">predictions, targets, epsilon=<span class=\"number\">1e-12</span></span>):</span><br><span class=\"line\">  predictions = np.clip(predictions, epsilon, <span class=\"number\">1.</span>-epsilon)</span><br><span class=\"line\">  N = predictions.shape[<span class=\"number\">0</span>]</span><br><span class=\"line\">  ce = -np.<span class=\"built_in\">sum</span>(targets * np.log(predictions)) / N</span><br><span class=\"line\">  <span class=\"keyword\">return</span> ce</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">to_onehot</span>(<span class=\"params\">label, n_classes</span>):</span><br><span class=\"line\">  N = label.shape[<span class=\"number\">0</span>]</span><br><span class=\"line\">  onehot = np.zeros((N, n_classes))</span><br><span class=\"line\">  <span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> <span class=\"built_in\">range</span>(N):</span><br><span class=\"line\">    onehot[i][label[i]] = <span class=\"number\">1</span></span><br><span class=\"line\">  <span class=\"keyword\">return</span> onehot</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">if</span> __name__ == <span class=\"string\">&#x27;__main__&#x27;</span>:</span><br><span class=\"line\">  x = np.array([[<span class=\"number\">5</span>, <span class=\"number\">2.5</span>, <span class=\"number\">0.1</span>], [<span class=\"number\">4</span>, <span class=\"number\">0.8</span>, -<span class=\"number\">2</span>], [-<span class=\"number\">2</span>, <span class=\"number\">1.5</span>, -<span class=\"number\">30</span>]])</span><br><span class=\"line\">  label = np.array([<span class=\"number\">0</span>, <span class=\"number\">0</span>, <span class=\"number\">1</span>])</span><br><span class=\"line\">  n_classes = x.shape[<span class=\"number\">1</span>]</span><br><span class=\"line\">  targets = to_onehot(label, n_classes)</span><br><span class=\"line\">  predictions = softmax(x)</span><br><span class=\"line\">  <span class=\"built_in\">print</span>(predictions)</span><br><span class=\"line\">  ce = cross_entropy(predictions, targets)</span><br><span class=\"line\">  <span class=\"built_in\">print</span>(ce)</span><br><span class=\"line\"></span><br><span class=\"line\">  loss = nn.CrossEntropyLoss()</span><br><span class=\"line\">  ce_torch = loss(torch.tensor(x), torch.tensor(label).<span class=\"built_in\">type</span>(torch.LongTensor))</span><br><span class=\"line\">  <span class=\"built_in\">print</span>(ce_torch)</span><br></pre></td></tr></table></figure>\n<h3 id=\"KNN\"><a href=\"#KNN\" class=\"headerlink\" title=\"KNN\"></a>KNN</h3><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> numpy <span class=\"keyword\">as</span> np</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">createData</span>():</span><br><span class=\"line\">  group = np.array([[<span class=\"number\">1.0</span>, <span class=\"number\">2.0</span>], [<span class=\"number\">1.2</span>, <span class=\"number\">0.1</span>], [<span class=\"number\">0.1</span>, <span class=\"number\">1.4</span>], [<span class=\"number\">0.3</span>, <span class=\"number\">3.5</span>]])</span><br><span class=\"line\">  labels = [<span class=\"string\">&#x27;A&#x27;</span>, <span class=\"string\">&#x27;A&#x27;</span>, <span class=\"string\">&#x27;B&#x27;</span>, <span class=\"string\">&#x27;B&#x27;</span>]</span><br><span class=\"line\">  <span class=\"keyword\">return</span> group, labels</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">classify</span>(<span class=\"params\"><span class=\"built_in\">input</span>, data, label, k</span>):</span><br><span class=\"line\">  dataSize = data.shape[<span class=\"number\">0</span>]</span><br><span class=\"line\">  <span class=\"keyword\">assert</span>(k &lt;= dataSize)</span><br><span class=\"line\">  diff = np.tile(<span class=\"built_in\">input</span>, (dataSize, <span class=\"number\">1</span>)) - data</span><br><span class=\"line\">  sqdiff = diff ** <span class=\"number\">2</span></span><br><span class=\"line\">  squareDist = np.<span class=\"built_in\">sum</span>(sqdiff, axis = <span class=\"number\">1</span>)</span><br><span class=\"line\">  dist = squareDist ** <span class=\"number\">0.5</span></span><br><span class=\"line\">  sortedDistIndex = np.argsort(dist)</span><br><span class=\"line\"></span><br><span class=\"line\">  classCount = &#123;&#125;</span><br><span class=\"line\">  <span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> <span class=\"built_in\">range</span>(k):</span><br><span class=\"line\">    voteLabel = label[sortedDistIndex[i]]</span><br><span class=\"line\">    classCount[voteLabel] = classCount.get(voteLabel, <span class=\"number\">0</span>) + <span class=\"number\">1</span></span><br><span class=\"line\">  maxCount = <span class=\"number\">0</span></span><br><span class=\"line\">  <span class=\"keyword\">for</span> key, value <span class=\"keyword\">in</span> classCount.items():</span><br><span class=\"line\">    <span class=\"keyword\">if</span> value &gt; maxCount:</span><br><span class=\"line\">      maxCount = value</span><br><span class=\"line\">      classes = key</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">return</span> classes</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">if</span> __name__ == <span class=\"string\">&quot;__main__&quot;</span>:</span><br><span class=\"line\">  <span class=\"built_in\">input</span> = np.array([<span class=\"number\">1.1</span>, <span class=\"number\">0.9</span>])</span><br><span class=\"line\">  data, label = createData()</span><br><span class=\"line\">  classes = classify(<span class=\"built_in\">input</span>, data, label, <span class=\"number\">2</span>)</span><br><span class=\"line\">  <span class=\"built_in\">print</span>(classes)</span><br></pre></td></tr></table></figure>\n<h3 id=\"Kmeans\"><a href=\"#Kmeans\" class=\"headerlink\" title=\"Kmeans\"></a>Kmeans</h3><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> numpy <span class=\"keyword\">as</span> np</span><br><span class=\"line\"><span class=\"keyword\">from</span> math <span class=\"keyword\">import</span> sqrt</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">distElud</span>(<span class=\"params\">vecA, vecB</span>):</span><br><span class=\"line\">  <span class=\"keyword\">return</span> sqrt(<span class=\"built_in\">sum</span>(np.power((vecA - vecB), <span class=\"number\">2</span>)))</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">randCent</span>(<span class=\"params\">data, k</span>):</span><br><span class=\"line\">  n = np.shape(data)[<span class=\"number\">1</span>]</span><br><span class=\"line\">  center = np.mat(np.zeros((k, n)))</span><br><span class=\"line\">  <span class=\"keyword\">for</span> j <span class=\"keyword\">in</span> <span class=\"built_in\">range</span>(n):</span><br><span class=\"line\">    rangeJ = <span class=\"built_in\">float</span>(<span class=\"built_in\">max</span>(data[:, j]) - <span class=\"built_in\">min</span>(data[:, j]))</span><br><span class=\"line\">    center[:, j] = <span class=\"built_in\">min</span>(data[:, j]) + rangeJ * np.random.rand(k, <span class=\"number\">1</span>)</span><br><span class=\"line\">  <span class=\"keyword\">return</span> center</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">kmeans</span>(<span class=\"params\">data, k, dist = distElud, createCent = randCent</span>):</span><br><span class=\"line\">  m = np.shape(data)[<span class=\"number\">0</span>]</span><br><span class=\"line\">  clusterAssment = np.mat(np.zeros((m, <span class=\"number\">2</span>)))</span><br><span class=\"line\">  center = createCent(data, k)</span><br><span class=\"line\">  <span class=\"comment\"># print(center)</span></span><br><span class=\"line\">  clusterChanged = <span class=\"literal\">True</span></span><br><span class=\"line\">  <span class=\"keyword\">while</span> clusterChanged:</span><br><span class=\"line\">    clusterChanged = <span class=\"literal\">False</span></span><br><span class=\"line\">    <span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> <span class=\"built_in\">range</span>(m):</span><br><span class=\"line\">      minDist = np.inf</span><br><span class=\"line\">      minIndex = -<span class=\"number\">1</span></span><br><span class=\"line\">      <span class=\"keyword\">for</span> j <span class=\"keyword\">in</span> <span class=\"built_in\">range</span>(k):</span><br><span class=\"line\">        distJI = dist(data[i, :], np.array(center[j, :]).squeeze(<span class=\"number\">0</span>))</span><br><span class=\"line\">        <span class=\"keyword\">if</span> distJI &lt; minDist:</span><br><span class=\"line\">          minDist = distJI</span><br><span class=\"line\">          minIndex = j</span><br><span class=\"line\">      <span class=\"keyword\">if</span> clusterAssment[i, <span class=\"number\">0</span>] != minIndex:</span><br><span class=\"line\">        clusterChanged = <span class=\"literal\">True</span></span><br><span class=\"line\">      clusterAssment[i,:] = minIndex, minDist ** <span class=\"number\">2</span></span><br><span class=\"line\">    <span class=\"keyword\">for</span> cent <span class=\"keyword\">in</span> <span class=\"built_in\">range</span>(k):</span><br><span class=\"line\">      dataCent = data[np.nonzero(clusterAssment[:, <span class=\"number\">0</span>].A == cent)[<span class=\"number\">0</span>]]</span><br><span class=\"line\">      <span class=\"comment\"># print(dataCent)</span></span><br><span class=\"line\">      <span class=\"keyword\">if</span> dataCent.shape[<span class=\"number\">0</span>] == <span class=\"number\">0</span>:</span><br><span class=\"line\">        <span class=\"keyword\">continue</span></span><br><span class=\"line\">      center[cent, :] = np.mean(dataCent, axis = <span class=\"number\">0</span>)</span><br><span class=\"line\">  <span class=\"keyword\">return</span> center, clusterAssment</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">if</span> __name__ == <span class=\"string\">&quot;__main__&quot;</span>:</span><br><span class=\"line\">  data = np.array([[<span class=\"number\">1</span>, <span class=\"number\">2</span>], [<span class=\"number\">2</span>, <span class=\"number\">1</span>], [<span class=\"number\">3</span>, <span class=\"number\">1</span>], [<span class=\"number\">5</span>, <span class=\"number\">4</span>], [<span class=\"number\">5</span>, <span class=\"number\">5</span>], [<span class=\"number\">6</span>, <span class=\"number\">5</span>],</span><br><span class=\"line\">                  [<span class=\"number\">10</span>, <span class=\"number\">8</span>], [<span class=\"number\">7</span>, <span class=\"number\">9</span>], [<span class=\"number\">11</span>, <span class=\"number\">5</span>], [<span class=\"number\">14</span>, <span class=\"number\">9</span>], [<span class=\"number\">14</span>, <span class=\"number\">14</span>]])</span><br><span class=\"line\">  center, clusterAssment = kmeans(data, <span class=\"number\">3</span>)</span><br><span class=\"line\">  <span class=\"built_in\">print</span>(center)</span><br><span class=\"line\">  <span class=\"built_in\">print</span>(clusterAssment)</span><br></pre></td></tr></table></figure>\n<h3 id=\"DBSCAN\"><a href=\"#DBSCAN\" class=\"headerlink\" title=\"DBSCAN\"></a>DBSCAN</h3><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># -*- coding: utf-8 -*-</span></span><br><span class=\"line\"><span class=\"comment\"># https://github.com/choffstein/dbscan</span></span><br><span class=\"line\"><span class=\"comment\"># A Density-Based Algorithm for Discovering Clusters in Large Spatial Databases with Noise</span></span><br><span class=\"line\"><span class=\"comment\"># Martin Ester, Hans-Peter Kriegel, Jörg Sander, Xiaowei Xu</span></span><br><span class=\"line\"><span class=\"comment\"># dbscan: density based spatial clustering of applications with noise</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> numpy <span class=\"keyword\">as</span> np</span><br><span class=\"line\"><span class=\"keyword\">import</span> math</span><br><span class=\"line\"></span><br><span class=\"line\">UNCLASSIFIED = <span class=\"literal\">False</span></span><br><span class=\"line\">NOISE = <span class=\"literal\">None</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">_dist</span>(<span class=\"params\">p, q</span>):</span><br><span class=\"line\">  <span class=\"keyword\">return</span> math.sqrt(np.power(p - q, <span class=\"number\">2</span>).<span class=\"built_in\">sum</span>())</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">_eps_neighborhood</span>(<span class=\"params\">p, q, eps</span>):</span><br><span class=\"line\">  <span class=\"keyword\">return</span> _dist(p, q) &lt; eps</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">_region_query</span>(<span class=\"params\">m, point_id, eps</span>):</span><br><span class=\"line\">  n_points = m.shape[<span class=\"number\">1</span>]</span><br><span class=\"line\">  seeds = []</span><br><span class=\"line\">  <span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> <span class=\"built_in\">range</span>(<span class=\"number\">0</span>, n_points):</span><br><span class=\"line\">      <span class=\"keyword\">if</span> _eps_neighborhood(m[:,point_id], m[:,i], eps):</span><br><span class=\"line\">          seeds.append(i)</span><br><span class=\"line\">  <span class=\"keyword\">return</span> seeds</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">_expand_cluster</span>(<span class=\"params\">m, classifications, point_id, cluster_id, eps, min_points</span>):</span><br><span class=\"line\">  seeds = _region_query(m, point_id, eps)</span><br><span class=\"line\">  <span class=\"keyword\">if</span> <span class=\"built_in\">len</span>(seeds) &lt; min_points:</span><br><span class=\"line\">    classifications[point_id] = NOISE</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"literal\">False</span></span><br><span class=\"line\">  <span class=\"keyword\">else</span>:</span><br><span class=\"line\">    classifications[point_id] = cluster_id</span><br><span class=\"line\">    <span class=\"keyword\">for</span> seed_id <span class=\"keyword\">in</span> seeds:</span><br><span class=\"line\">      classifications[seed_id] = cluster_id</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"keyword\">while</span> <span class=\"built_in\">len</span>(seeds) &gt; <span class=\"number\">0</span>:</span><br><span class=\"line\">      current_point = seeds[<span class=\"number\">0</span>]</span><br><span class=\"line\">      results = _region_query(m, current_point, eps)</span><br><span class=\"line\">      <span class=\"keyword\">if</span> <span class=\"built_in\">len</span>(results) &gt;= min_points:</span><br><span class=\"line\">        <span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> <span class=\"built_in\">range</span>(<span class=\"number\">0</span>, <span class=\"built_in\">len</span>(results)):</span><br><span class=\"line\">          result_point = results[i]</span><br><span class=\"line\">          <span class=\"keyword\">if</span> classifications[result_point] == UNCLASSIFIED <span class=\"keyword\">or</span> \\</span><br><span class=\"line\">              classifications[result_point] == NOISE:</span><br><span class=\"line\">            <span class=\"keyword\">if</span> classifications[result_point] == UNCLASSIFIED:</span><br><span class=\"line\">              seeds.append(result_point)</span><br><span class=\"line\">            classifications[result_point] = cluster_id</span><br><span class=\"line\">      seeds = seeds[<span class=\"number\">1</span>:]</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"literal\">True</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">dbscan</span>(<span class=\"params\">m, eps, min_points</span>):</span><br><span class=\"line\">  <span class=\"string\">&quot;&quot;&quot;</span></span><br><span class=\"line\"><span class=\"string\">  Implementation of Density Based Spatial Clustering of Applications with Noise.</span></span><br><span class=\"line\"><span class=\"string\">  See https://en.wikipedia.org/wiki/DBSCAN.</span></span><br><span class=\"line\"><span class=\"string\">  scikit-learn probably has a better implementation.</span></span><br><span class=\"line\"><span class=\"string\">  Uses Euclidean Distance as the measure.</span></span><br><span class=\"line\"><span class=\"string\">  Inputs:</span></span><br><span class=\"line\"><span class=\"string\">  m - A matrix whose columns are feature vectors.</span></span><br><span class=\"line\"><span class=\"string\">  eps - Maximum distance two points can be to be regionally related.</span></span><br><span class=\"line\"><span class=\"string\">  min_points - The minimum number of points to make a cluster.</span></span><br><span class=\"line\"><span class=\"string\">  Outputs:</span></span><br><span class=\"line\"><span class=\"string\">  An array with either a cluster id number or dbscan.NOISE (None) for each</span></span><br><span class=\"line\"><span class=\"string\">  column vector in m.</span></span><br><span class=\"line\"><span class=\"string\">  &quot;&quot;&quot;</span></span><br><span class=\"line\">  cluster_id = <span class=\"number\">1</span></span><br><span class=\"line\">  n_points = m.shape[<span class=\"number\">1</span>]</span><br><span class=\"line\">  classifications = [UNCLASSIFIED] * n_points</span><br><span class=\"line\">  <span class=\"keyword\">for</span> point_id <span class=\"keyword\">in</span> <span class=\"built_in\">range</span>(<span class=\"number\">0</span>, n_points):</span><br><span class=\"line\">    point = m[:,point_id]</span><br><span class=\"line\">    <span class=\"keyword\">if</span> classifications[point_id] == UNCLASSIFIED:</span><br><span class=\"line\">      <span class=\"keyword\">if</span> _expand_cluster(m, classifications, point_id, cluster_id, eps, min_points):</span><br><span class=\"line\">        cluster_id = cluster_id + <span class=\"number\">1</span></span><br><span class=\"line\">  <span class=\"keyword\">return</span> classifications</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">test_dbscan</span>():</span><br><span class=\"line\">  m = np.matrix(<span class=\"string\">&#x27;1 1.2 0.8 3.7 3.9 3.6 10; 1.1 0.8 1 4 3.9 4.1 10&#x27;</span>)</span><br><span class=\"line\">  eps = <span class=\"number\">0.5</span></span><br><span class=\"line\">  min_points = <span class=\"number\">2</span></span><br><span class=\"line\">  <span class=\"keyword\">assert</span> dbscan(m, eps, min_points) == [<span class=\"number\">1</span>, <span class=\"number\">1</span>, <span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">2</span>, <span class=\"number\">2</span>, <span class=\"literal\">None</span>]</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">if</span> __name__ == <span class=\"string\">&quot;__main__&quot;</span>:</span><br><span class=\"line\">  test_dbscan()</span><br></pre></td></tr></table></figure>\n<h3 id=\"MLP\"><a href=\"#MLP\" class=\"headerlink\" title=\"MLP\"></a>MLP</h3><p>Numpy</p>\n<p><a href=\"https://github.com/hui126/Deep_Learning_Coding\">https://github.com/hui126/Deep_Learning_Coding</a></p>\n","feature":false,"text":"learning...","permalink":"/post/learning/coding","photos":[],"count_time":{"symbolsCount":"6.7k","symbolsTime":"6 mins."},"categories":[{"name":"learning","slug":"learning","count":6,"path":"api/categories/learning.json"}],"tags":[{"name":"coding","slug":"coding","count":4,"path":"api/tags/coding.json"}],"toc":"<ol class=\"toc\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#Softmax-CrossEntropy\"><span class=\"toc-text\">Softmax CrossEntropy</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#KNN\"><span class=\"toc-text\">KNN</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#Kmeans\"><span class=\"toc-text\">Kmeans</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#DBSCAN\"><span class=\"toc-text\">DBSCAN</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#MLP\"><span class=\"toc-text\">MLP</span></a></li></ol>","author":{"name":"NoleHuan","slug":"blog-author","avatar":"/img/tennis_logo.svg","link":"/","description":"The true nature of a heart is seen in its response to the unattractive.","socials":{"github":"https://github.com/nolehuan","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"https://weibo.com/u/5948495997","zhihu":"","csdn":"","juejin":"","customs":{}}},"mapped":true,"hidden":false,"prev_post":{"title":"nms","uid":"7e6b04d6ee5d3c39d64da1c68ae92e32","slug":"learning/nms","date":"2024-01-01T16:11:29.000Z","updated":"2024-01-01T08:14:11.449Z","comments":true,"path":"api/articles/learning/nms.json","cover":null,"text":"non maximum suppression...","permalink":"/post/learning/nms","photos":[],"count_time":{"symbolsCount":"3.4k","symbolsTime":"3 mins."},"categories":[{"name":"learning","slug":"learning","count":6,"path":"api/categories/learning.json"}],"tags":[{"name":"coding","slug":"coding","count":4,"path":"api/tags/coding.json"},{"name":"nms","slug":"nms","count":1,"path":"api/tags/nms.json"}],"author":{"name":"NoleHuan","slug":"blog-author","avatar":"/img/tennis_logo.svg","link":"/","description":"The true nature of a heart is seen in its response to the unattractive.","socials":{"github":"https://github.com/nolehuan","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"https://weibo.com/u/5948495997","zhihu":"","csdn":"","juejin":"","customs":{}}},"feature":false},"next_post":{"title":"interview","uid":"b988af6f31f47d8c6d6425d0c29bbbe5","slug":"learning/interview","date":"2023-12-31T15:55:29.000Z","updated":"2024-01-01T08:39:46.536Z","comments":true,"path":"api/articles/learning/interview.json","cover":[],"text":"interview review...","permalink":"/post/learning/interview","photos":[],"count_time":{"symbolsCount":"3.4k","symbolsTime":"3 mins."},"categories":[{"name":"learning","slug":"learning","count":6,"path":"api/categories/learning.json"}],"tags":[{"name":"CNN","slug":"CNN","count":1,"path":"api/tags/CNN.json"}],"author":{"name":"NoleHuan","slug":"blog-author","avatar":"/img/tennis_logo.svg","link":"/","description":"The true nature of a heart is seen in its response to the unattractive.","socials":{"github":"https://github.com/nolehuan","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"https://weibo.com/u/5948495997","zhihu":"","csdn":"","juejin":"","customs":{}}},"feature":false}}